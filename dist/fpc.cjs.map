{"version":3,"file":"fpc.cjs","sources":["../src/basic.coffee","../src/add.coffee","../src/divide.coffee","../src/multiply.coffee","../src/power.coffee","../src/random1.coffee","../src/random2.coffee","../src/random3.coffee","../src/random4.coffee","../src/random5.coffee","../src/squareRoot.coffee","../src/subtract.coffee","../src/floorCeilRound.coffee","../src/ceil.coffee","../src/ceil2.coffee","../src/round.coffee","../src/round2.coffee","../src/f.coffee","../src/floor.coffee","../src/floor2.coffee","../src/takeOrDrop.coffee","../src/t.coffee","../src/take.coffee","../src/drop.coffee","../src/reverse.coffee","../src/some.coffee","../src/every.coffee","../src/highOrderFunc.coffee","../src/index.coffee"],"sourcesContent":["###*\n  * Is a utility function that can be used to perform\n  * various mathematical operations on arrays of numbers.\n  *\n  * @private\n  * @param {Array} v\n  * @param {Function} f\n  * @return {Number}\n###\n\nbasic = (v, f) ->\n  unless v instanceof Array\n    throw new Error \"Typeof: #{typeof v}\"\n\n  return v.reduce (s, e) ->\n    unless typeof +e == 'number'\n      return 0\n    return f s, e\n\nexport default basic\n","import basic from './basic.coffee'\n\n###*\n  * This function performs the addition operation on the\n  * elements of an array of numbers and returns their sum.\n  *\n  * @param {Array} v\n  * @return {Number}\n###\n\nadd = (v) ->\n  basic v, (s, e) -> s + e\n\nexport default add\n","import basic from './basic.coffee'\n\n###*\n  * This function performs the division operation on the\n  * elements of an array of numbers and returns their quotient.\n\n  * @param {Array} v\n  * @return {Number}\n###\n\ndivide = (v) ->\n  basic v, (s, e) -> s / e\n\nexport default divide\n","import basic from './basic.coffee'\n\n###*\n  * This function performs the multiplication operation on\n  * the elements of an array of numbers and returns their product.\n  *\n  * @param {Array} v\n  * @return {Number}\n###\n\nmultiply = (v) ->\n  basic v, (s, e) -> s * e\n\nexport default multiply\n","###*\n  * This function takes an array `o` as a parameter and returns\n  * a new array where each element is raised to the power of 2.\n  *\n  * @param {Array} o\n  * @return {Array} new array\n###\n\npower = (o) ->\n  s = o.slice()\n  return s.map (q) -> q ** 2\n\nexport default power\n","###*\n  * This function generates a random number\n  * between 0 and 9 (inclusive) and returns it.\n  *\n  * @return {Number}\n###\n\nrandom1 = ->\n  return Math.floor Math.random() * 10\n\nexport default random1\n","###*\n  * This function generates a random decimal number between 0 and 99\n  * (inclusive) without using Math.floor and returns it.\n  *\n  * @return {Number}\n###\n\nrandom2 = ->\n  return Math.random() * 100\n\nexport default random2\n","###*\n  * This function generates a random decimal number between 0 and 99\n  * (inclusive) with Math.floor and returns it.\n  *\n  * @return {Number}\n###\n\nrandom3 = ->\n  return Math.floor Math.random() * 100\n\nexport default random3\n","###*\n  * This function generates a random decimal number between 0 and 999\n  * (inclusive) without using Math.floor and returns it.\n  *\n  * @return {Number}\n###\n\nrandom4 = ->\n  return Math.random() * 1000\n\nexport default random4\n","###*\n  * This function generates a random decimal number between 0 and 999\n  * (inclusive) with using Math.floor and returns it.\n  *\n  * @return {Number}\n###\n\nrandom5 = ->\n  return Math.floor Math.random() * 1000\n\nexport default random5\n","###*\n  * Calculate the square root of each element in the input array.\n  *\n  * @param {Array} w\n  * @return {Array} new array\n###\n\nsquareRoot = (w) ->\n  a = w.slice()\n  return a.map (e) -> Math.sqrt e\n\nexport default squareRoot\n","import basic from './basic.coffee'\n\n###*\n  * This function performs the subtraction operation on the\n  * elements of an array of numbers and returns their difference.\n  *\n  * @param {Array} v\n  * @return {Number}\n###\n\nsubtract = (v) ->\n  basic v, (s, e) -> s - e\n\nexport default subtract\n","###*\n  * @private\n  * @param {Array} g\n  * @param {Function} y\n  * @return {Array} new array\n###\n\nfloorCeilRound = (g, y) ->\n  unless g instanceof Array\n    throw new Error \"Typeof: #{typeof g}\"\n\n  c = new Array()\n\n  for f in g\n    unless typeof +f == 'number'\n      return 0\n    p = y f\n    c.push p\n\n  return c\n\nexport default floorCeilRound\n","###*\n  * @param {Number} t\n  * @return {Number}\n###\n\nceil = (t) ->\n  return Math.ceil t\n\nexport default ceil\n","###*\n  * @param {Array} k\n  * @return {Array} new array\n###\n\nceil2 = (k) ->\n  floorCeilRound k, (k) -> Math.ceil k\n\nexport default ceil2\n","###*\n  * @param {Number} z\n  * @return {Number}\n###\n\nround = (z) ->\n  return Math.round z\n\nexport default round\n","###*\n  * @param {Array} h\n  * @return {Array} new array\n###\n\nround2 = (h) ->\n  floorCeilRound h, (h) -> Math.round h\n\nexport default round2\n","###*\n  * @return {Boolean} false\n###\n\nf = -> false\n\nexport default f\n","###*\n  * @param {Number} r\n  * @return {Number}\n###\n\nfloor = (r) ->\n  return Math.floor r\n\nexport default floor\n","###*\n  * @param {Array} n\n  * @return {Array} new array\n###\n\nfloor2 = (n) ->\n  floorCeilRound n, (n) -> Math.floor n\n\nexport default floor2\n","###*\n  * @private\n  * @param {Array} r\n  * @param {Number} h\n  * @return {Array} new array\n###\n\ntakeOrDrop = (r, h) ->\n  unless r instanceof Array\n    throw new Error \"Typeof: #{typeof r}\"\n\n  if h >= 0\n    return r.slice 0, r.length - h\n  else\n    return r.slice -h\n\nexport default takeOrDrop\n","###*\n  * @return {Boolean} true\n###\n\nt = -> true\n\nexport default t\n","import takeOrDrop from './takeOrDrop.coffee'\n\n###*\n  * @param {Array} b\n  * @param {Number} t\n  * @return {Array} new array\n###\n\ntake = (b, t) ->\n  takeOrDrop b, t\n\nexport default take\n","import takeOrDrop from './takeOrDrop.coffee'\n\n###*\n  * @param {Array} e\n  * @param {Number} p\n  * @return {Array} new array\n###\n\ndrop = (e, p) ->\n  takeOrDrop e, -p\n\nexport default drop\n","###*\n  * This function takes an array as input and returns\n  * a new array with the elements in reverse order.\n  *\n  * @param {Array} o\n  * @return {Array} new array\n###\n\nreverse = (o) ->\n  t = o.slice().reverse()\n  return t\n\nexport default reverse\n","###*\n  * This function `some` takes an array `a` and a\n  * string `w` as parameters and returns a boolean value.\n  *\n  * @param {Array} a\n  * @param {String} w\n  * @return {Boolean}\n###\n\nsome = (a, w) ->\n  unless a instanceof Array\n    throw new Error \"Typeof: #{typeof a}\"\n\n  n = String w\n\n  for i in a\n    if n = String i\n      return true\n\n  return false\n\nexport default some\n","###*\n  * This function `every` takes an array `l` and a string\n  * `c` as parameters and returns a boolean value.\n  *\n  * @param {Array} l\n  * @param {String} c\n  * @return {Boolean}\n###\n\nevery = (l, c) ->\n  unless l instanceof Array\n    throw new Error \"Typeof: #{typeof l}\"\n\n  x = String c\n\n  return l.every (e) -> e == x\n\nexport default every\n","###*\n  * highOrderFunc takes multiple arguments and returns a new array.\n  * It iterates over each argument and checks if it is a function. If it is,\n  * it calls the function and pushes the result into the new array.\n  *\n  * @param {Array} a\n  * @return {Array} new array\n###\n\nhighOrderFunc = (...a) ->\n  r = new Array()\n\n  for e in a\n    unless typeof e == 'function'\n      throw new Error 'Argument not a function'\n\n    r.push e()\n  return r\n\nexport default highOrderFunc\n","import basic from './basic.coffee'\nimport add from './add.coffee'\nimport divide from './divide.coffee'\nimport multiply from './multiply.coffee'\nimport power from './power.coffee'\nimport random1 from './random1.coffee'\nimport random2 from './random2.coffee'\nimport random3 from './random3.coffee'\nimport random4 from './random4.coffee'\nimport random5 from './random5.coffee'\nimport squareRoot from './squareRoot.coffee'\nimport subtract from './subtract.coffee'\nimport floorCeilRound from './floorCeilRound.coffee'\nimport ceil from './ceil.coffee'\nimport ceil2 from './ceil2.coffee'\nimport round from './round.coffee'\nimport round2 from './round2.coffee'\nimport f from './f.coffee'\nimport floor from './floor.coffee'\nimport floor2 from './floor2.coffee'\nimport takeOrDrop from './takeOrDrop.coffee'\nimport t from './t.coffee'\nimport take from './take.coffee'\nimport drop from './drop.coffee'\nimport reverse from './reverse.coffee'\nimport some from './some.coffee'\nimport every from './every.coffee'\nimport highOrderFunc from './highOrderFunc.coffee'\n\nF = {\n  f\n  t\n  basic\n  add\n  divide\n  multiply\n  power\n  random1\n  random2\n  random3\n  random4\n  random5\n  squareRoot\n  subtract\n  floorCeilRound\n  ceil\n  ceil2\n  round\n  round2\n  floor\n  floor2\n  takeOrDrop\n  take\n  drop\n  reverse\n  some\n  every\n  highOrderFunc\n}\n\nexport default F\n"],"names":["basic","floorCeilRound","takeOrDrop","f","t","add","divide","multiply","power","random1","random2","random3","random4","random5","squareRoot","subtract","ceil","ceil2","round","round2","floor","floor2","take","drop","reverse","some","every","highOrderFunc"],"mappings":";;;;;;;;;;AAQG;;;;;;;;;AAAA,IAAA,KAAA,CAAA;;AAEH,KAAA,GAAQ,SAAC,CAAD,EAAI,CAAJ,EAAA;EACN,IAAO,EAAA,CAAA,YAAa,KAApB,CAAA,EAAA;IACE,MAAM,IAAI,KAAJ,CAAU,CAAA,QAAA,EAAW,OAAO,CAAlB,CAAA,CAAV,CADR,CAAA;;AAGA,EAAO,OAAA,CAAC,CAAC,MAAF,CAAS,SAAC,CAAD,EAAI,CAAJ,EAAA;AACd,IAAA,IAAO,OAAO,CAAC,CAAR,KAAa,QAApB,EAAA;AACE,MAAA,OAAO,CADT,CAAA;;AAEA,IAAA,OAAO,CAAA,CAAE,CAAF,EAAK,CAAL,CAAA,CAAA;GAHF,CAAA,CAAA;AAJD,CAAA,CAAA;;AASR,cAAe,KAAA;;;;;;;;;ACnBf,IAAA,GAAA,CAAA;;AAUA,GAAA,GAAM,SAAC,CAAD,EAAA;SACJA,OAAA,CAAM,CAAN,EAAS,SAAC,CAAD,EAAI,CAAJ,EAAA;AAAU,IAAA,OAAA,CAAA,GAAI,CAAA,CAAA;GAAvB,CAAA,CAAA;AADI,CAAA,CAAA;;AAGN,YAAe,GAAA;;;;;;;;;ACbf,IAAA,MAAA,CAAA;;AAUA,MAAA,GAAS,SAAC,CAAD,EAAA;SACPA,OAAA,CAAM,CAAN,EAAS,SAAC,CAAD,EAAI,CAAJ,EAAA;AAAU,IAAA,OAAA,CAAA,GAAI,CAAA,CAAA;GAAvB,CAAA,CAAA;AADO,CAAA,CAAA;;AAGT,eAAe,MAAA;;;;;;;;;ACbf,IAAA,QAAA,CAAA;;AAUA,QAAA,GAAW,SAAC,CAAD,EAAA;SACTA,OAAA,CAAM,CAAN,EAAS,SAAC,CAAD,EAAI,CAAJ,EAAA;AAAU,IAAA,OAAA,CAAA,GAAI,CAAA,CAAA;GAAvB,CAAA,CAAA;AADS,CAAA,CAAA;;AAGX,iBAAe,QAAA;;ACPZ;;;;;;;AAAA,IAAA,KAAA,CAAA;;AAEH,KAAA,GAAQ,SAAC,CAAD,EAAA;AACR,EAAA,IAAA,CAAA,CAAA;AAAE,EAAA,CAAA,GAAI,CAAC,CAAC,KAAF,EAAA,CAAA;AACJ,EAAA,OAAO,CAAC,CAAC,GAAF,CAAM,SAAC,CAAD,EAAA;AAAO,IAAA,OAAA,CAAA,IAAK,CAAA,CAAA;GAAlB,CAAA,CAAA;AAFD,CAAA,CAAA;;AAIR,cAAe,KAAA;;ACPZ;;;;;;AAAA,IAAA,OAAA,CAAA;;AAEH,OAAA,GAAU,WAAA;AACR,EAAO,OAAA,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,EAAA,GAAgB,EAA3B,CAAA,CAAA;AADC,CAAA,CAAA;;AAGV,gBAAe,OAAA;;ACLZ;;;;;;AAAA,IAAA,OAAA,CAAA;;AAEH,OAAA,GAAU,WAAA;AACR,EAAA,OAAO,IAAI,CAAC,MAAL,EAAA,GAAgB,GAAA,CAAA;AADf,CAAA,CAAA;;AAGV,gBAAe,OAAA;;ACLZ;;;;;;AAAA,IAAA,OAAA,CAAA;;AAEH,OAAA,GAAU,WAAA;AACR,EAAO,OAAA,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,EAAA,GAAgB,GAA3B,CAAA,CAAA;AADC,CAAA,CAAA;;AAGV,gBAAe,OAAA;;ACLZ;;;;;;AAAA,IAAA,OAAA,CAAA;;AAEH,OAAA,GAAU,WAAA;AACR,EAAA,OAAO,IAAI,CAAC,MAAL,EAAA,GAAgB,IAAA,CAAA;AADf,CAAA,CAAA;;AAGV,gBAAe,OAAA;;ACLZ;;;;;;AAAA,IAAA,OAAA,CAAA;;AAEH,OAAA,GAAU,WAAA;AACR,EAAO,OAAA,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,EAAA,GAAgB,IAA3B,CAAA,CAAA;AADC,CAAA,CAAA;;AAGV,gBAAe,OAAA;;ACLZ;;;;;;AAAA,IAAA,UAAA,CAAA;;AAEH,UAAA,GAAa,SAAC,CAAD,EAAA;AACb,EAAA,IAAA,CAAA,CAAA;AAAE,EAAA,CAAA,GAAI,CAAC,CAAC,KAAF,EAAA,CAAA;AACJ,EAAA,OAAO,CAAC,CAAC,GAAF,CAAM,SAAC,CAAD,EAAA;WAAO,IAAI,CAAC,IAAL,CAAU,CAAV,CAAA,CAAA;GAAb,CAAA,CAAA;AAFI,CAAA,CAAA;;AAIb,mBAAe,UAAA;;;;;;;;;ACXf,IAAA,QAAA,CAAA;;AAUA,QAAA,GAAW,SAAC,CAAD,EAAA;SACTA,OAAA,CAAM,CAAN,EAAS,SAAC,CAAD,EAAI,CAAJ,EAAA;AAAU,IAAA,OAAA,CAAA,GAAI,CAAA,CAAA;GAAvB,CAAA,CAAA;AADS,CAAA,CAAA;;AAGX,iBAAe,QAAA;;ACRZ;;;;;;AAAA,IAAAC,gBAAA,CAAA;;AAEHA,gBAAA,GAAiB,SAAC,CAAD,EAAI,CAAJ,EAAA;AACjB,EAAA,IAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,CAAA;EAAE,IAAO,EAAA,CAAA,YAAa,KAApB,CAAA,EAAA;IACE,MAAM,IAAI,KAAJ,CAAU,CAAA,QAAA,EAAW,OAAO,CAAlB,CAAA,CAAV,CADR,CAAA;;EAGA,CAAA,GAAI,IAAI,KAAJ,EAAA,CAAA;AAEJ,EAAA,KAAA,CAAA,GAAA,CAAA,EAAA,GAAA,GAAA,CAAA,CAAA,MAAA,EAAA,CAAA,GAAA,GAAA,EAAA,CAAA,EAAA,EAAA;;AACE,IAAA,IAAO,OAAO,CAAC,CAAR,KAAa,QAApB,EAAA;AACE,MAAA,OAAO,CADT,CAAA;;IAEA,CAAA,GAAI,CAAA,CAAE,CAAF,CAAA,CAAA;IACJ,CAAC,CAAC,IAAF,CAAO,CAAP,CAAA,CAAA;AAJF,GAAA;AAMA,EAAO,OAAA,CAAA,CAAA;AAZQ,CAAA,CAAA;;AAcjB,uBAAeA,gBAAA;;AClBZ;;;;AAAA,IAAA,IAAA,CAAA;;AAEH,IAAA,GAAO,SAAC,CAAD,EAAA;AACL,EAAA,OAAO,IAAI,CAAC,IAAL,CAAU,CAAV,CAAA,CAAA;AADF,CAAA,CAAA;;AAGP,aAAe,IAAA;;ACLZ;;;;AAAA,IAAA,KAAA,CAAA;;AAEH,KAAA,GAAQ,SAAC,CAAD,EAAA;AACN,EAAA,OAAA,cAAA,CAAe,CAAf,EAAkB,SAAC,CAAD,EAAA;WAAO,IAAI,CAAC,IAAL,CAAU,CAAV,CAAA,CAAA;GAAzB,CAAA,CAAA;AADM,CAAA,CAAA;;AAGR,cAAe,KAAA;;ACLZ;;;;AAAA,IAAA,KAAA,CAAA;;AAEH,KAAA,GAAQ,SAAC,CAAD,EAAA;AACN,EAAA,OAAO,IAAI,CAAC,KAAL,CAAW,CAAX,CAAA,CAAA;AADD,CAAA,CAAA;;AAGR,cAAe,KAAA;;ACLZ;;;;AAAA,IAAA,MAAA,CAAA;;AAEH,MAAA,GAAS,SAAC,CAAD,EAAA;AACP,EAAA,OAAA,cAAA,CAAe,CAAf,EAAkB,SAAC,CAAD,EAAA;WAAO,IAAI,CAAC,KAAL,CAAW,CAAX,CAAA,CAAA;GAAzB,CAAA,CAAA;AADO,CAAA,CAAA;;AAGT,eAAe,MAAA;;ACNZ;;;AAAA,IAAA,CAAA,CAAA;;AAEH,CAAA,GAAI,WAAA;AAAG,EAAA,OAAA,KAAA,CAAA;AAAH,CAAA,CAAA;;AAEJ,UAAe,CAAA;;ACHZ;;;;AAAA,IAAA,KAAA,CAAA;;AAEH,KAAA,GAAQ,SAAC,CAAD,EAAA;AACN,EAAA,OAAO,IAAI,CAAC,KAAL,CAAW,CAAX,CAAA,CAAA;AADD,CAAA,CAAA;;AAGR,cAAe,KAAA;;ACLZ;;;;AAAA,IAAA,MAAA,CAAA;;AAEH,MAAA,GAAS,SAAC,CAAD,EAAA;AACP,EAAA,OAAA,cAAA,CAAe,CAAf,EAAkB,SAAC,CAAD,EAAA;WAAO,IAAI,CAAC,KAAL,CAAW,CAAX,CAAA,CAAA;GAAzB,CAAA,CAAA;AADO,CAAA,CAAA;;AAGT,eAAe,MAAA;;ACHZ;;;;;;AAAA,IAAA,UAAA,CAAA;;AAEH,UAAA,GAAa,SAAC,CAAD,EAAI,CAAJ,EAAA;EACX,IAAO,EAAA,CAAA,YAAa,KAApB,CAAA,EAAA;IACE,MAAM,IAAI,KAAJ,CAAU,CAAA,QAAA,EAAW,OAAO,CAAlB,CAAA,CAAV,CADR,CAAA;;EAGA,IAAG,CAAA,IAAK,CAAR,EAAA;AACE,IAAO,OAAA,CAAC,CAAC,KAAF,CAAQ,CAAR,EAAW,CAAC,CAAC,MAAF,GAAW,CAAtB,CADT,CAAA;GAAA,MAAA;AAGE,IAAA,OAAO,CAAC,CAAC,KAAF,CAAQ,CAAC,CAAT,CAHT,CAAA;;AAJW,CAAA,CAAA;;AASb,mBAAe,UAAA;;ACdZ;;;AAAA,IAAA,CAAA,CAAA;;AAEH,CAAA,GAAI,WAAA;AAAG,EAAA,OAAA,IAAA,CAAA;AAAH,CAAA,CAAA;;AAEJ,UAAe,CAAA;;;;;;;ACNf,IAAA,IAAA,CAAA;;AAQA,IAAA,GAAO,SAAC,CAAD,EAAI,CAAJ,EAAA;SACLC,YAAA,CAAW,CAAX,EAAc,CAAd,CAAA,CAAA;AADK,CAAA,CAAA;;AAGP,aAAe,IAAA;;;;;;;ACXf,IAAA,IAAA,CAAA;;AAQA,IAAA,GAAO,SAAC,CAAD,EAAI,CAAJ,EAAA;AACL,EAAA,OAAAA,YAAA,CAAW,CAAX,EAAc,CAAC,CAAf,CAAA,CAAA;AADK,CAAA,CAAA;;AAGP,aAAe,IAAA;;ACLZ;;;;;;;AAAA,IAAA,OAAA,CAAA;;AAEH,OAAA,GAAU,SAAC,CAAD,EAAA;AACV,EAAA,IAAA,CAAA,CAAA;EAAE,CAAA,GAAI,CAAC,CAAC,KAAF,EAAS,CAAC,OAAV,EAAA,CAAA;AACJ,EAAO,OAAA,CAAA,CAAA;AAFC,CAAA,CAAA;;AAIV,gBAAe,OAAA;;ACLZ;;;;;;;;AAAA,IAAA,IAAA,CAAA;;AAEH,IAAA,GAAO,SAAC,CAAD,EAAI,CAAJ,EAAA;AACP,EAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA;EAAE,IAAO,EAAA,CAAA,YAAa,KAApB,CAAA,EAAA;IACE,MAAM,IAAI,KAAJ,CAAU,CAAA,QAAA,EAAW,OAAO,CAAlB,CAAA,CAAV,CADR,CAAA;;AAKA,EAAA,KAAA,CAAA,GAAA,CAAA,EAAA,GAAA,GAAA,CAAA,CAAA,MAAA,EAAA,CAAA,GAAA,GAAA,EAAA,CAAA,EAAA,EAAA;;AACE,IAAA,IAAO,MAAA,CAAO,CAAP,CAAP,EAAA;AACE,MAAA,OAAO,IADT,CAAA;;AADF,GAAA;AAIA,EAAO,OAAA,KAAA,CAAA;AAVF,CAAA,CAAA;;AAYP,aAAe,IAAA;;ACdZ;;;;;;;;AAAA,IAAA,KAAA,CAAA;;AAEH,KAAA,GAAQ,SAAC,CAAD,EAAI,CAAJ,EAAA;AACR,EAAA,IAAA,CAAA,CAAA;EAAE,IAAO,EAAA,CAAA,YAAa,KAApB,CAAA,EAAA;IACE,MAAM,IAAI,KAAJ,CAAU,CAAA,QAAA,EAAW,OAAO,CAAlB,CAAA,CAAV,CADR,CAAA;;EAGA,CAAA,GAAI,MAAA,CAAO,CAAP,CAAA,CAAA;AAEJ,EAAA,OAAO,CAAC,CAAC,KAAF,CAAQ,SAAC,CAAD,EAAA;AAAO,IAAA,OAAA,CAAA,KAAK,CAAA,CAAA;GAApB,CAAA,CAAA;AAND,CAAA,CAAA;;AAQR,cAAe,KAAA;;ACVZ;;;;;;;;AAAA,IAAA,aAAA,CAAA;;AAEH,aAAA,GAAgB,SAAA,GAAI,CAAJ,EAAA;AAChB,EAAA,IAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,CAAA;EAAE,CAAA,GAAI,IAAI,KAAJ,EAAA,CAAA;AAEJ,EAAA,KAAA,CAAA,GAAA,CAAA,EAAA,GAAA,GAAA,CAAA,CAAA,MAAA,EAAA,CAAA,GAAA,GAAA,EAAA,CAAA,EAAA,EAAA;;IACE,IAAO,OAAO,CAAP,KAAY,UAAnB,EAAA;AACE,MAAA,MAAM,IAAI,KAAJ,CAAU,yBAAV,CADR,CAAA;;AAGA,IAAA,CAAC,CAAC,IAAF,CAAO,CAAA,EAAP,CAAA,CAAA;AAJF,GAAA;AAKA,EAAO,OAAA,CAAA,CAAA;AARO,CAAA,CAAA;;AAUhB,sBAAe,aAAA;;ACnBf,IAAA,CAAA,CAAA;;AA6BA,CAAA,GAAI,IACFC,GADE,KAEFC,GAFE,SAGFJ,OAHE,OAIFK,KAJE,UAKFC,QALE,YAMFC,UANE,SAOFC,OAPE,WAQFC,SARE,WASFC,SATE,WAUFC,SAVE,WAWFC,SAXE,WAYFC,SAZE,cAaFC,YAbE,YAcFC,UAdE,kBAeFd,gBAfE,QAgBFe,MAhBE,SAiBFC,OAjBE,SAkBFC,OAlBE,UAmBFC,QAnBE,SAoBFC,OApBE,UAqBFC,QArBE,cAsBFnB,YAtBE,QAuBFoB,MAvBE,QAwBFC,MAxBE,WAyBFC,SAzBE,QA0BFC,MA1BE,SA2BFC,OA3BE,iBA4BFC,eA5BE,CAAA,CAAA;;AA+BJ,UAAe,CAAA;;;;"}